This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-25T23:28:25.599Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.repomixignore
client/components.json
client/index.html
client/package.json
client/README.md
client/src/App.css
client/src/App.tsx
client/src/components/landing/BottomCTA.tsx
client/src/components/landing/PostCard.tsx
client/src/components/landing/WelcomeBanner.tsx
client/src/components/ui/alert.tsx
client/src/components/ui/button.tsx
client/src/components/ui/card.tsx
client/src/components/ui/input.tsx
client/src/components/ui/textarea.tsx
client/src/contexts/AuthContext.tsx
client/src/index.css
client/src/lib/firebase.ts
client/src/lib/utils.ts
client/src/main.tsx
client/src/pages/FeedPage.tsx
client/src/pages/LandingPage.tsx
client/src/pages/ProfileSetupPage.tsx
client/src/types/index.ts
client/src/utils/mockData.ts
client/src/vite-env.d.ts
instructions.md
README.md
server/cmd/api/main.go
server/go.mod
server/go.sum
server/internal/config/database.go
server/internal/database/client.go

================================================================
Repository Files
================================================================

================
File: .repomixignore
================
# Dependencies
**/node_modules/
**/dist/
**/build/

# Environment files
**/.env
**/.env.*
**/vite.env.d.ts

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Debug logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
**/debug.log

# Test files
**/coverage/
**/__tests__/
**/*.test.*
**/*.spec.*

# Build output
**/bin/
**/out/

# Cache directories
.cache/
.npm/
.eslintcache

# Lock files
**/package-lock.json
**/yarn.lock

# Config files that aren't essential for understanding the codebase
**/*.config.js
**/*.config.ts
**/tsconfig*.json
**/.eslintrc*
**/.prettierrc*
**/.editorconfig

# Assets and public files
**/public/
**/assets/
**/*.svg
**/*.png
**/*.jpg
**/*.jpeg
**/*.gif

# Git related
.git/
.gitignore
.github/

================
File: client/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: client/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: client/package.json
================
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@googlemaps/js-api-loader": "^1.16.8",
    "@radix-ui/react-slot": "^1.1.1",
    "@supabase/supabase-js": "^2.47.10",
    "class-variance-authority": "^0.7.1",
    "client": "file:",
    "clsx": "^2.1.1",
    "firebase": "^11.1.0",
    "lucide-react": "^0.469.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router": "^7.1.1",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/google.maps": "^3.58.1",
    "@types/node": "^22.10.2",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: client/README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: client/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: client/src/App.tsx
================
import { AuthProvider } from "@/contexts/AuthContext";
import { BrowserRouter, Routes, Route, Navigate } from "react-router";
import { useAuth } from "@/contexts/AuthContext";
import LandingPage from "@/pages/LandingPage";
import ProfileSetupPage from "@/pages/ProfileSetupPage";
import FeedPage from "@/pages/FeedPage";

// Protected route wrapper
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/" />;
  }

  return <>{children}</>;
};

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route
            path="/profile-setup"
            element={
              <ProtectedRoute>
                <ProfileSetupPage />
              </ProtectedRoute>
            }
          />
          <Route
            path="/feed"
            element={
              <ProtectedRoute>
                <FeedPage />
              </ProtectedRoute>
            }
          />
        </Routes>
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;

================
File: client/src/components/landing/BottomCTA.tsx
================
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface BottomCTAProps {
  onSignUp: () => void;
}

const BottomCTA: React.FC<BottomCTAProps> = ({ onSignUp }) => {
  return (
    <Card className="bg-gradient-to-r from-amber-800 to-amber-700 text-white border-none">
      <CardContent className="pt-6">
        <h3 className="text-xl font-bold mb-2">Ready to join the community?</h3>
        <p className="mb-4 opacity-90">
          Sign up now to share your own coffee experiences, follow other
          enthusiasts, and discover new favorite spots.
        </p>
        <Button
          className="w-full bg-white text-amber-800 hover:bg-gray-100"
          onClick={onSignUp}
        >
          Create Account
        </Button>
      </CardContent>
    </Card>
  );
};

export default BottomCTA;

================
File: client/src/components/landing/PostCard.tsx
================
import React from "react";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Heart, MessageCircle, Share2, MapPin, Coffee } from "lucide-react";
import { Post } from "@/types";

interface PostCardProps {
  post: Post;
  onInteraction: () => void;
}

const PostCard: React.FC<PostCardProps> = ({ post, onInteraction }) => {
  return (
    <Card className="mb-6">
      <CardContent className="p-0">
        {/* Post Header */}
        <div className="p-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-full bg-amber-100 flex items-center justify-center">
              {post.username[0].toUpperCase()}
            </div>
            <div>
              <p className="font-medium">{post.username}</p>
              <div className="flex items-center gap-1 text-sm text-gray-500">
                <MapPin className="w-3 h-3" />
                <span>{post.shopName}</span>
              </div>
            </div>
          </div>
          <div className="flex items-center gap-1 text-amber-800">
            <Coffee className="w-4 h-4" />
            <span className="font-medium">{post.rating}</span>
          </div>
        </div>

        {/* Post Image */}
        <div className="aspect-square relative">
          <img
            src={post.imageUrl}
            alt="Coffee post"
            className="w-full h-full object-cover"
          />
        </div>

        {/* Post Actions */}
        <div className="p-4">
          <div className="flex gap-4 mb-3">
            <button
              onClick={onInteraction}
              className="text-gray-600 hover:text-amber-800"
            >
              <Heart className="w-6 h-6" />
            </button>
            <button
              onClick={onInteraction}
              className="text-gray-600 hover:text-amber-800"
            >
              <MessageCircle className="w-6 h-6" />
            </button>
            <button
              onClick={onInteraction}
              className="text-gray-600 hover:text-amber-800"
            >
              <Share2 className="w-6 h-6" />
            </button>
          </div>

          {/* Post Details */}
          <div>
            <p className="font-medium mb-1">{post.drinkName}</p>
            <p className="text-gray-600">{post.caption}</p>
            <p className="text-sm text-gray-500 mt-2">
              {post.likes} likes • {post.comments} comments
            </p>
          </div>
        </div>
      </CardContent>

      <CardFooter className="bg-gray-50 border-t">
        <button
          onClick={onInteraction}
          className="w-full text-gray-600 text-sm py-2"
        >
          Add a comment...
        </button>
      </CardFooter>
    </Card>
  );
};

export default PostCard;

================
File: client/src/components/landing/WelcomeBanner.tsx
================
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface WelcomeBannerProps {
  onSignUp: () => void;
}

const WelcomeBanner: React.FC<WelcomeBannerProps> = ({ onSignUp }) => {
  return (
    <Card className="mb-6 bg-gradient-to-r from-amber-50 to-orange-50 border-none">
      <CardContent className="pt-6">
        <h2 className="text-2xl font-bold text-amber-900 mb-2">
          Welcome to Coffeehaus
        </h2>
        <p className="text-amber-800 mb-4">
          Join our community of coffee enthusiasts to discover and share the
          best coffee experiences in your area.
        </p>
        <Button
          className="w-full bg-amber-800 text-white hover:bg-amber-700"
          onClick={onSignUp}
        >
          Join Now
        </Button>
      </CardContent>
    </Card>
  );
};

export default WelcomeBanner;

================
File: client/src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: client/src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: client/src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: client/src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: client/src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: client/src/contexts/AuthContext.tsx
================
/* eslint-disable react-refresh/only-export-components */
import React, { createContext, useContext, useEffect, useState } from "react";
import { useNavigate } from "react-router";
import {
  User,
  GoogleAuthProvider,
  signInWithPopup,
  signOut as firebaseSignOut,
  onAuthStateChanged,
} from "firebase/auth";
import { auth } from "@/lib/firebase";

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signInWithGoogle: () => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      setUser(user);
      setLoading(false);

      if (!user) {
        // Only redirect to landing page if user signs out
        navigate("/");
      }
    });

    return unsubscribe;
  }, [navigate]);

  const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      // Check if this is a new user by checking if they have a Google provider
      const isNewUser = !result.user.providerData.some(
        (data) => data.providerId === "google.com"
      );

      console.log("isNewUser", isNewUser);

      if (result.user) {
        if (isNewUser) {
          // If new user, redirect to profile setup
          navigate("/profile-setup");
        } else {
          // If existing user, redirect to feed
          navigate("/feed");
        }
      }
    } catch (error) {
      console.error("Error signing in with Google:", error);
      throw error;
    }
  };

  const signOut = async () => {
    try {
      await firebaseSignOut(auth);
      navigate("/");
    } catch (error) {
      console.error("Error signing out:", error);
      throw error;
    }
  };

  const value = {
    user,
    loading,
    signInWithGoogle,
    signOut,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light;
  background-color: #fafafa;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  min-height: 100vh;
  color: #262626;
  background-color: #fafafa;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: client/src/lib/firebase.ts
================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

// Initialize Firebase
export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);

================
File: client/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: client/src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: client/src/pages/FeedPage.tsx
================
import React from "react";
import { useNavigate } from "react-router";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/contexts/AuthContext";
import { Coffee } from "lucide-react";
import { mockFeedPosts } from "@/utils/mockData";
import PostCard from "@/components/landing/PostCard";

const FeedPage: React.FC = () => {
  const navigate = useNavigate();
  const { user, signOut } = useAuth();

  const handleSignOut = async () => {
    try {
      await signOut();
      navigate("/");
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="fixed top-0 w-full bg-white border-b z-50">
        <div className="max-w-5xl mx-auto px-4 py-2 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Coffee className="h-6 w-6 text-amber-800" />
            <h1 className="text-xl font-bold text-amber-800">Coffeehaus</h1>
          </div>
          <div className="flex items-center gap-4">
            {user?.photoURL && (
              <img
                src={user.photoURL}
                alt="Profile"
                className="w-8 h-8 rounded-full"
              />
            )}
            <Button
              variant="outline"
              className="border-amber-800 text-amber-800 hover:bg-amber-50"
              onClick={handleSignOut}
            >
              Sign Out
            </Button>
          </div>
        </div>
      </nav>

      <main className="pt-14">
        <div className="max-w-5xl mx-auto px-4 py-6 grid grid-cols-1 md:grid-cols-12 gap-8">
          <div className="md:col-span-4 md:sticky md:top-20 h-fit">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center gap-4 mb-4">
                {user?.photoURL && (
                  <img
                    src={user.photoURL}
                    alt="Profile"
                    className="w-16 h-16 rounded-full"
                  />
                )}
                <div>
                  <h2 className="font-semibold">{user?.displayName}</h2>
                  <p className="text-gray-600 text-sm">{user?.email}</p>
                </div>
              </div>
              <p className="text-sm text-gray-600 mb-4">
                Welcome to your personalized coffee feed! Share your favorite
                coffee experiences and discover new spots.
              </p>
            </div>
          </div>

          <div className="md:col-span-8 space-y-6">
            {mockFeedPosts.map((post) => (
              <PostCard key={post.id} post={post} onInteraction={() => {}} />
            ))}
          </div>
        </div>
      </main>
    </div>
  );
};

export default FeedPage;

================
File: client/src/pages/LandingPage.tsx
================
/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState } from "react";
import { Coffee } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAuth } from "@/contexts/AuthContext";
import { mockFeedPosts } from "@/utils/mockData";
import PostCard from "@/components/landing/PostCard";
import WelcomeBanner from "@/components/landing/WelcomeBanner";
import BottomCTA from "@/components/landing/BottomCTA";

const LandingPage: React.FC = () => {
  const { signInWithGoogle } = useAuth();
  const [showAuthPrompt, setShowAuthPrompt] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleInteraction = () => {
    setShowAuthPrompt(true);
    setTimeout(() => {
      setShowAuthPrompt(false);
    }, 3000);
  };

  const handleSignIn = async () => {
    try {
      await signInWithGoogle();
    } catch (error) {
      setError("Failed to sign in with Google. Please try again.");
      setTimeout(() => setError(null), 3000);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Fixed Navigation */}
      <nav className="fixed top-0 w-full bg-white border-b z-50">
        <div className="max-w-5xl mx-auto px-4 py-2 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Coffee className="h-6 w-6 text-amber-800" />
            <h1 className="text-xl font-bold text-amber-800">Coffeehaus</h1>
          </div>
          <Button
            variant="outline"
            className="border-amber-800 text-amber-800 hover:bg-amber-50"
            onClick={handleSignIn}
          >
            Sign In with Google
          </Button>
        </div>
      </nav>

      {/* Auth Prompt Alert */}
      {showAuthPrompt && (
        <div className="fixed top-16 left-0 right-0 mx-auto w-full max-w-md z-50 px-4">
          <Alert className="bg-amber-800 text-white border-none">
            <AlertDescription>
              Sign up or log in to like, comment, and share your own coffee
              experiences!
            </AlertDescription>
          </Alert>
        </div>
      )}

      {/* Error Alert */}
      {error && (
        <div className="fixed top-16 left-0 right-0 mx-auto w-full max-w-md z-50 px-4">
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {/* Main Content */}
      <main className="pt-14">
        <div className="max-w-5xl mx-auto px-4 py-6 grid grid-cols-1 md:grid-cols-12 gap-8">
          {/* Welcome Banner - Left Side */}
          <div className="md:col-span-4 md:sticky md:top-20 h-fit">
            <WelcomeBanner onSignUp={handleSignIn} />
          </div>

          {/* Feed - Right Side */}
          <div className="md:col-span-8">
            {mockFeedPosts.map((post) => (
              <PostCard
                key={post.id}
                post={post}
                onInteraction={handleInteraction}
              />
            ))}
            <BottomCTA onSignUp={handleSignIn} />
          </div>
        </div>
      </main>
    </div>
  );
};

export default LandingPage;

================
File: client/src/pages/ProfileSetupPage.tsx
================
import React, { useState, ChangeEvent, FormEvent } from "react";
import { useNavigate } from "react-router";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useAuth } from "@/contexts/AuthContext";

const ProfileSetupPage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    username: "",
    displayName: "",
    bio: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // TODO: Implement API call to save user profile
      console.log("Profile data:", formData);

      // Navigate to feed page after successful submission
      navigate("/feed", { replace: true });
    } catch (error) {
      console.error("Error saving profile:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center">
      <div className="max-w-md w-full p-6 bg-white rounded-lg shadow-md">
        <h1 className="text-2xl font-bold text-amber-800 mb-6">
          Complete Your Profile
        </h1>

        {user?.photoURL && (
          <div className="mb-6 flex justify-center">
            <img
              src={user.photoURL}
              alt="Profile"
              className="w-24 h-24 rounded-full"
            />
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium mb-1"
            >
              Username *
            </label>
            <Input
              id="username"
              value={formData.username}
              onChange={handleInputChange}
              required
              placeholder="Choose a unique username"
              disabled={isSubmitting}
            />
          </div>

          <div>
            <label
              htmlFor="displayName"
              className="block text-sm font-medium mb-1"
            >
              Display Name *
            </label>
            <Input
              id="displayName"
              value={formData.displayName}
              onChange={handleInputChange}
              required
              placeholder="Your display name"
              disabled={isSubmitting}
            />
          </div>

          <div>
            <label htmlFor="bio" className="block text-sm font-medium mb-1">
              Bio (Optional)
            </label>
            <Textarea
              id="bio"
              value={formData.bio}
              onChange={handleInputChange}
              placeholder="Tell us about yourself..."
              className="h-24"
              disabled={isSubmitting}
            />
          </div>

          <Button
            type="submit"
            className="w-full bg-amber-800 text-white hover:bg-amber-700"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Setting up..." : "Complete Setup"}
          </Button>
        </form>
      </div>
    </div>
  );
};

export default ProfileSetupPage;

================
File: client/src/types/index.ts
================
export interface User {
  id: string;
  email: string;
  username: string | null;
  avatarUrl: string | null;
  bio: string | null;
}

export interface Post {
  id: number;
  username: string;
  shopName: string;
  location: string;
  imageUrl: string;
  likes: number;
  comments: number;
  rating: number;
  caption: string;
  drinkName: string;
  drinkPrice: number;
}

export interface Shop {
  id: string;
  yelpId: string;
  name: string;
  location: {
    lat: number;
    lng: number;
  };
  address: string;
  photos: string[];
  yelpRating: number;
  coffeehausRating: number | null;
  priceLevel: string;
  hours: {
    [key: string]: {
      open: string;
      close: string;
    };
  };
}

================
File: client/src/utils/mockData.ts
================
import { Post } from "@/types";

export const mockFeedPosts: Post[] = [
  {
    id: 1,
    username: "coffeeexplorer",
    shopName: "Artisan Coffee Co",
    location: "Downtown",
    imageUrl: "/api/placeholder/400/400",
    likes: 234,
    comments: 45,
    rating: 4.5,
    caption:
      "Perfect morning brew ☕️ The latte art here never disappoints! #coffeeart #morningcoffee",
    drinkName: "Oat Milk Latte",
    drinkPrice: 5,
  },
  {
    id: 2,
    username: "beanconnoisseur",
    shopName: "Roasters & Co",
    location: "Westside",
    imageUrl: "/api/placeholder/400/400",
    likes: 156,
    comments: 28,
    rating: 5,
    caption:
      "Their new single-origin Ethiopian beans are incredible! Notes of blueberry and dark chocolate.",
    drinkName: "Pour Over",
    drinkPrice: 4,
  },
  {
    id: 3,
    username: "caffeinechaser",
    shopName: "The Coffee Lab",
    location: "Arts District",
    imageUrl: "/api/placeholder/400/400",
    likes: 312,
    comments: 67,
    rating: 4.8,
    caption:
      "Found my new favorite spot! The atmosphere is perfect for working and the coffee is exceptional.",
    drinkName: "Cortado",
    drinkPrice: 3,
  },
];

================
File: client/src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: instructions.md
================
# Project Overview
You are building Coffeehaus, where users can discover and share experiences about coffee shops through an Instagram-style,
mobile-first web platform with location-based discovery, photo sharing, and social features. The app will be built using a modern tech stack combining:

Frontend: Vite.js and React with TypeScript, shadcn, tailwindcss, and an icon library of your choice
Backend: Go API with Chi
Authentication: Firebase Auth
Database: Supabase (PostgreSQL)
External Services:

Yelp API for coffee shop data
Google Maps for location features
Cloudinary for image processing
Google Cloud Platform for infrastructure

# Core Functionalities

## Priority 1: Core Authentication & Basic Data
### User Features
1. User Authentication (sign up with google, sign in with google, sign out) via Firebase Auth
    - When signing up/in with google, the user will be met with a google sign in popup to authorize the user
    - If the user is a first time user, they will be asked to enter a unique username, enter a display name, and enter an optional bio for themselves (we will use the profile photo from google as the avatar)
    - If the user is successful, the user should be able to login and see their feed
    - If the user fails authorization, there should be a alert/toast popup letting the user know that they failed to auth

2. Basic profile with username, avatar, and bio (optional)
    - When a new user signs up, they will be taken to a page to enter a new username, select their choice of avatar, and enter an optional bio for themselves
    - A user will have a basic profile page that is similar to how a user account from instagram works. Their profile will display their username, avatar, and bio (if they have one), as well as the posts they have created
    - Each post on the users profile should be similar to how instagram displays these posts, a square preview of the post that allows any auth'd user to click on which should lead to a modal of the post along with comments made on the said post
    - a username is unique to each user

### Coffee Shop Features
1. Integration with Yelp API for shop data
    - Shop data will be initially populated through Yelp API integration, providing verified business information including name, address, hours, and basic ratings
    - Users can discover coffee shops through a map interface, list view, or by searching with options to filter by distance, rating, or price level
    - Each coffee shop will have its own unique profile page displaying both Yelp data and Coffeehaus-specific content

## Priority 2: Basic Content & Viewing Features
### Social Features
1. Instagram-style photo posts with:
    - Single photo support initially (stored in Google Cloud Storage)
    - Location/shop tagging
    - Simple star rating (1-5)
    - Optional drink details
    - Basic captions

### Coffee Shop Features
1. Basic text search for shop names
    - Users can search for shops by name
    - Search results can be viewed in list format

2. Shop profiles with basic information
    - Each shop has a dedicated profile page featuring:
        * Basic information (hours, address, price level) from Yelp
        * Interactive map showing the shop's location
        * List of recent posts tagged at this location

## Priority 3: Social Engagement & Enhanced Discovery
### Social Features
1. Likes and comments
    - All auth users should be able to like and comment on a post. A user can only like a post once and a user can comment on a post as many times as they want. Users can also unlike a post

2. User following system
    - A user can follow another user once as well as unfollow a user. Once a user unfollows a user, they are allowed to follow that user again

### Coffee Shop Features
1. Location-based discovery
    - Users can see nearby coffee shops on an interactive map powered by Google Maps
    - Distance to each shop is displayed when browsing in list view
    - Users can filter shops within a specific radius of their current location
    - The app will request location permissions to provide personalized nearby recommendations

2. Dual Rating System (Yelp + Coffeehaus average user ratings)
    - Coffee shops will display both their Yelp rating and a Coffeehaus-specific rating
    - The Coffeehaus rating is calculated from user post ratings on Cofeehaus (1-5 stars) and updates in real-time as new ratings come in. This rating will provide how the coffee is to the user (whether they recommend it or not)
    - The Yelp rating comes from Yelp themselves as whenever we visit a coffee shop page on Yelp, we are given yelp's users ratings. This rating will provide the overall experience of the coffee shop
    - Users can see a breakdown of ratings and view the posts that contributed to the overall Coffeehaus score

## Priority 4: Advanced Features & Optimizations
### Social Features
1. Enhanced Instagram-style photo posts:
    - Multiple photo support up to 3
    - Captions with hashtag support

2. Activity feed
    - As of right now, a users activity feed will contain all posts made by anyone that uses the app. Whether they follow the user or not, similar to a user's personal feed

### User Features
1. Personal feed of users posts
    - As of right now, the users personal feed will contain all posts made by anyone that uses the app. Whether they follow the user or not

### Coffee Shop Features
1. Advanced search features
    - Autocomplete suggestions
    - Advanced filtering options including:
        * Operating hours (currently open)
        * Price level
        * Rating threshold
        * Distance range
        * Popular times
    - Map view integration for search results

2. Enhanced shop profiles
    - Additional features:
        * Photo gallery combining Yelp photos and user-submitted content
        * Quick statistics (total posts, average rating, popular drinks)
        * Option to save/bookmark the shop for later visits

# Doc

# Coffeehaus Data Models

## Core Entities

### User
The User model represents registered users of the Coffeehaus platform.
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    username TEXT UNIQUE NOT NULL,
    display_name TEXT,
    profile_photo_id UUID REFERENCES photos(id),
    bio TEXT,
    location POINT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Shop
The Shop model stores information about coffee shops, integrating data from Yelp with our platform's specific data.
```sql
CREATE TABLE shops (
    id UUID PRIMARY KEY,
    yelp_id TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    location POINT NOT NULL,
    address TEXT NOT NULL,
    yelp_rating DECIMAL(2,1),
    coffeehaus_rating DECIMAL(2,1),
    price_level TEXT,
    hours JSONB,
    last_sync TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Post
The Post model represents user-created content about their coffee experiences.
```sql
CREATE TABLE posts (
    id UUID PRIMARY KEY,
    user_id UUID REFERENCES users(id),
    shop_id UUID REFERENCES shops(id),
    caption TEXT,
    drink_name TEXT,
    drink_price DECIMAL,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Photo
The Photo model stores information about uploaded images, including their cloud storage locations and versions.
```sql
CREATE TABLE photos (
    id UUID PRIMARY KEY,
    post_id UUID REFERENCES posts(id),
    position INTEGER,
    versions JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

## Social Features

### Comment
The Comment model allows users to engage with posts through written responses.
```sql
CREATE TABLE comments (
    id UUID PRIMARY KEY,
    post_id UUID REFERENCES posts(id),
    user_id UUID REFERENCES users(id),
    text TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### PostLike (Junction Table)
Tracks which users have liked which posts, forming a many-to-many relationship.
```sql
CREATE TABLE post_likes (
    post_id UUID REFERENCES posts(id),
    user_id UUID REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (post_id, user_id)
);
```

### UserFollow (Junction Table)
Manages follow relationships between users, creating a self-referential many-to-many relationship.
```sql
CREATE TABLE user_follows (
    follower_id UUID REFERENCES users(id),
    following_id UUID REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (follower_id, following_id)
);
```

### SavedPost (Junction Table)
Allows users to bookmark posts for later reference.
```sql
CREATE TABLE saved_posts (
    user_id UUID REFERENCES users(id),
    post_id UUID REFERENCES posts(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, post_id)
);
```

### FavoriteShop (Junction Table)
Enables users to maintain a list of their favorite coffee shops.
```sql
CREATE TABLE favorite_shops (
    user_id UUID REFERENCES users(id),
    shop_id UUID REFERENCES shops(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, shop_id)
);
```

## Content Organization

### Hashtag
The Hashtag model supports content categorization and discovery.
```sql
CREATE TABLE hashtags (
    id UUID PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
);
```

### PostHashtag (Junction Table)
Associates posts with hashtags, enabling content discovery and trending topics.
```sql
CREATE TABLE post_hashtags (
    post_id UUID REFERENCES posts(id),
    hashtag_id UUID REFERENCES hashtags(id),
    PRIMARY KEY (post_id, hashtag_id)
);
```

## Key Relationships

The data models form an interconnected system where:
- Users create posts about their experiences at coffee shops
- Posts contain photos and can be tagged with hashtags
- Users can follow other users, like posts, and favorite shops
- Comments and likes create engagement on posts
- Photos are associated with either posts or user profiles
- Shops maintain their own statistics and ratings


# Current File Structure
Coffeehaus
├── README.md
├── client
│   ├── README.md
│   ├── components.json
│   ├── eslint.config.js
│   ├── index.html
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public
│   │   └── vite.svg
│   ├── src
│   │   ├── App.css
│   │   ├── App.tsx
│   │   ├── assets
│   │   │   └── react.svg
│   │   ├── components
│   │   ├── hooks
│   │   ├── index.css
│   │   ├── lib
│   │   │   ├── supabase.ts
│   │   │   └── utils.ts
│   │   ├── main.tsx
│   │   ├── pages
│   │   ├── store
│   │   │   └── index.ts
│   │   ├── types
│   │   │   └── index.ts
│   │   ├── utils
│   │   └── vite-env.d.ts
│   ├── tailwind.config.js
│   ├── tsconfig.app.json
│   ├── tsconfig.json
│   ├── tsconfig.node.json
│   └── vite.config.ts
├── coffeehaus logo.png
├── instructions.md
└── server
    ├── cmd
    │   └── api
    └── internal
        ├── handlers
        ├── middleware
        ├── models
        └── utils

================
File: README.md
================
# ☕ Coffeehaus

<a href="https://coffeehaus.app">
  <img src="https://github.com/johnnynu/Coffeehaus/blob/main/coffeehaus%20logo.png" alt="Coffeehaus" width="600">
</a>

*A social platform for coffee enthusiasts*

[![Visit](https://img.shields.io/badge/-Visit%20Coffeehaus-brown?style=for-the-badge&logo=coffeescript&logoColor=white)](https://coffeehaus.app)

## About

Discover and share your coffee experiences! Coffeehaus is a social platform that brings coffee enthusiasts together, helping you find the perfect café and share your favorite coffee moments.

Coffeehaus combines the joy of discovering new coffee shops with a vibrant social community. Whether you're a casual coffee drinker or a dedicated enthusiast, Coffeehaus helps you:

* Find the best coffee shops near you
* Share your coffee experiences through photos
* Connect with other coffee lovers
* Keep track of your favorite cafés and drinks
* Stay updated with the latest posts from people you follow

## Features

### Coffee Shop Discovery

* Find coffee shops near you with our interactive map
* View comprehensive shop information including hours, ratings, and photos
* See both official Yelp ratings and community reviews
* Search for shops by name or location

### Share Your Experience

* Post photos of your coffee experiences
* Tag coffee shops and share your location
* Add details about your drink
* Rate your experience
* Use hashtags to categorize your posts

### Social Features

* Follow other coffee enthusiasts
* Like and comment on posts
* Create a personalized profile
* Build your own feed of coffee content
* Save your favorite posts and shops

### Mobile-Optimized

* Works seamlessly on your phone or tablet
* Add to your home screen for quick access
* Upload photos directly from your camera
* Use your current location for shop discovery
* Native-like touch interactions

## Community Guidelines

We want Coffeehaus to be a welcoming space for all coffee lovers. Please:

* Be respectful to other users
* Share authentic experiences
* Give constructive feedback
* Follow our content guidelines when posting
* Report any inappropriate content

## Tech Stack

### Frontend

* Vite.js + React
* TypeScript
* Tailwind CSS with shadcn/ui components
* Zustand for state management
* Google Maps JavaScript API
* Firebase SDK

### Backend

* Go with Chi router
* Firebase Admin SDK
* Google Cloud Platform services

### Data & Storage

* Firestore (primary database)
* Cloud Memorystore (Redis) for caching
* Google Cloud Storage for images
* Cloudinary for image processing

### Authentication

* Firebase Authentication with Email/Password and Google OAuth
* JWT token management

## Infrastructure

* **Cloud Services**: Deployed on Google Cloud Platform
* **CDN**: Cloud CDN for content delivery
* **Image Processing**: Cloudinary
* **Caching**: Redis via Cloud Memorystore
* **Database**: Firestore
* **Storage**: Google Cloud Storage

## External APIs

* **Yelp Fusion API**: Coffee shop data and ratings
* **Google Maps**: Location services and shop discovery
* **Cloudinary**: Image optimization and processing

## Future Roadmap

* Advanced search with custom filters
* Push notification system
* Coffee shop owner verification

## Architecture Highlights

* Mobile-first responsive design
* Real-time updates using Firestore
* Location-based search optimization
* Efficient image processing pipeline
* Redis-based caching strategy
* Scalable microservices architecture

---

*Made with ☕ by coffee lovers, for coffee lovers.*

================
File: server/cmd/api/main.go
================
package main

import (
	"log"
	"net/http"
	"os"

	"github.com/johnnynu/Coffeehaus/internal/config"
	"github.com/johnnynu/Coffeehaus/internal/database"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// Initialize database
	dbConfig, err := config.NewDatabaseConfig()
	if err != nil {
		log.Fatalf("Failed to load database config: %v", err)
	}

	log.Printf("Connecting to supabase rest url: %s", dbConfig.RestURL)

	db, err := database.NewClient(dbConfig)
	if err != nil {
		log.Printf("db connection details: %+v", err)
		log.Fatalf("Failed to initialize database: %v", err)
	}

	r := chi.NewRouter()

	// Middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"http://localhost:5173"}, // Vite's default port
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type"},
		AllowCredentials: true,
		MaxAge:           300,
	}))

	// Routes
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Hello World"))
	})

	log.Printf("Server starting on port %s", port)
	if err := http.ListenAndServe(":"+port, r); err != nil {
		log.Fatal(err)
	}
}

================
File: server/go.mod
================
module github.com/johnnynu/Coffeehaus

go 1.22.3

require (
	github.com/go-chi/chi/v5 v5.2.0 // indirect
	github.com/go-chi/cors v1.2.1 // indirect
	github.com/joho/godotenv v1.5.1 // indirect
	github.com/supabase-community/postgrest-go v0.0.11 // indirect
)

================
File: server/go.sum
================
github.com/go-chi/chi/v5 v5.2.0 h1:Aj1EtB0qR2Rdo2dG4O94RIU35w2lvQSj6BRA4+qwFL0=
github.com/go-chi/chi/v5 v5.2.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=
github.com/go-chi/cors v1.2.1 h1:xEC8UT3Rlp2QuWNEr4Fs/c2EAGVKBwy/1vHx3bppil4=
github.com/go-chi/cors v1.2.1/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=
github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
github.com/supabase-community/postgrest-go v0.0.11 h1:717GTUMfLJxSBuAeEQG2MuW5Q62Id+YrDjvjprTSErg=
github.com/supabase-community/postgrest-go v0.0.11/go.mod h1:cw6LfzMyK42AOSBA1bQ/HZ381trIJyuui2GWhraW7Cc=

================
File: server/internal/config/database.go
================
package config

import (
	"fmt"
	"log"
	"os"

	"github.com/joho/godotenv"
)

type DatabaseConfig struct {
	SupabaseURL      string
	SupabaseKey      string
	ServiceRoleKey   string
	RestURL          string
}

func NewDatabaseConfig() (*DatabaseConfig, error) {
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found")
	}

	url := os.Getenv("SUPABASE_URL")
	key := os.Getenv("SUPABASE_KEY")
	serviceKey := os.Getenv("SUPABASE_SERVICE_KEY")

	if url == "" || key == "" {
		return nil, fmt.Errorf("SUPABASE_URL and SUPABASE_KEY must be set")
	}

	restURL := fmt.Sprintf("%s/rest/v1", url)

	return &DatabaseConfig{
		SupabaseURL:    url,
		SupabaseKey:    key,
		ServiceRoleKey: serviceKey,
		RestURL:        restURL,
	}, nil
}

================
File: server/internal/database/client.go
================
package database

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/johnnynu/Coffeehaus/internal/config"

	"github.com/supabase-community/postgrest-go"
)

type Client struct {
	*postgrest.Client
	config *config.DatabaseConfig
}

func NewClient(cfg *config.DatabaseConfig) (*Client, error) {
	// Create headers with Supabase key
	headers := map[string]string{
		"apikey":        cfg.SupabaseKey,
		"Authorization": "Bearer " + cfg.SupabaseKey,
		"Content-Type": "application/json",
		"Accept":       "application/json",
		"Prefer":       "return=representation",
	}

	// Initialize postgrest client
	client := postgrest.NewClient(cfg.RestURL, "public", headers)
	if client.ClientError != nil {
		return nil, fmt.Errorf("failed to initialize postgrest client: %w", client.ClientError)
	}

	db := &Client{
		Client: client,
		config: cfg,
	}

	// Test connection
	if err := db.TestConnection(); err != nil {
		return nil, fmt.Errorf("database connection test failed: %w", err)
	}

	return db, nil
}

// TestConnection verifies we can connect to Supabase
func (c *Client) TestConnection() error {
	resp, _, err := c.From("users").
		Select("count", "", false).
		Execute()
	
	if err != nil {
		return fmt.Errorf("connection test query failed: %w", err)
	}

	var result []map[string]interface{}
	if err := json.Unmarshal(resp, &result); err != nil {
		return fmt.Errorf("failed to parse response: %w", err)
	}

	if len(result) == 0 {
		return fmt.Errorf("unexpected empty response from database")
	}

	log.Printf("Successfully connected to Supabase")
	return nil
}

func (c *Client) GetUserByID(id string) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	
	resp, statusCode, queryResp := c.From("users").
		Select("*", "", false).
		Single().
		Eq("id", id).
		Execute()
	
	if statusCode != 200 {
		return nil, fmt.Errorf("failed to get user by id: %s", queryResp)
	}

	err := json.Unmarshal(resp, &result)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal user: %s", err)
	}

	return result, nil
}
